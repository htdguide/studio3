15/02/2024

* The project is a food shop specializing in dumpling sales.
* It involves an accounting system to manage financial transactions.
* Different user roles include Sellers or Merchants, Customers, and Administrators.
* The decision was made to use JavaScript and React for building the app.
* Firebase will be used as the database.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

16/02/2024


On the second day of developing a food delivery app, the Entity-Relationship Diagram (ERD) was established with key entities and their relationships:

Entities:

User: UserID, Username, Password, Email, Phone, Address
Restaurant: RestaurantID, Name, Cuisine Type, Location, Rating
Menu Item: ItemID, Name, Description, Price, RestaurantID
Order: OrderID, UserID, RestaurantID, Status, Timestamp
Payment: PaymentID, OrderID, Amount, Payment Method, Status

Relationships:

User-Order: One-to-Many
Restaurant-Menu Item: One-to-Many
Order-Menu Item: Many-to-Many
User-Payment: One-to-Many
Order-Payment: One-to-Many

Considerations:

Adaptable for user preferences, delivery addresses, and specific app features.
Allows for scalability and future modifications based on evolving requirements.



-----------------------------------------------------------------------------------------------------------------------------------------------------

22/02/2024

Entity-relationship diagrams (ERDs) are essential tools in database design, representing the logical structure of databases. There are several types of ERD diagrams commonly used:

Entity-Relationship Diagram (ERD): The basic form of an ERD, depicting entities, attributes, and relationships between entities.

Conceptual ERD: This type focuses on the high-level concepts and relationships in a system. It doesn't concern itself with implementation details like data types or constraints.

Logical ERD: This type delves deeper into the implementation details, showing attributes and data types, and often used in database design.

Physical ERD: This diagram describes the actual physical storage of data in a database, including tables, columns, indexes, etc. It's more detailed and specific than logical ERDs.

Crow's Foot Notation: A specific notation style for ERDs where entities are represented as rectangles, attributes as ovals, and relationships as lines connecting entities.

Chen Notation: Another notation style for ERDs, where entities are represented as rectangles, attributes as ellipses, and relationships as diamonds.

UML Class Diagram: While not strictly an ERD, UML class diagrams are often used in a similar context to represent classes, attributes, and relationships in object-oriented systems.

These diagrams help visualize the structure of a database system, aiding in its design, implementation, and maintenance.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

23/02/2024
